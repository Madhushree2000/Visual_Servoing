// Generated by gencpp from file autonomous_rov/Health.msg
// DO NOT EDIT!


#ifndef AUTONOMOUS_ROV_MESSAGE_HEALTH_H
#define AUTONOMOUS_ROV_MESSAGE_HEALTH_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace autonomous_rov
{
template <class ContainerAllocator>
struct Health_
{
  typedef Health_<ContainerAllocator> Type;

  Health_()
    : header()
    , cpu_used(0.0)
    , mem_used(0.0)
    , v_batt(0.0)
    , i_batt(0.0)
    , t_internal(0.0)
    , p_internal(0.0)
    , sw_1(false)
    , sw_2(false)  {
    }
  Health_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , cpu_used(0.0)
    , mem_used(0.0)
    , v_batt(0.0)
    , i_batt(0.0)
    , t_internal(0.0)
    , p_internal(0.0)
    , sw_1(false)
    , sw_2(false)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef float _cpu_used_type;
  _cpu_used_type cpu_used;

   typedef float _mem_used_type;
  _mem_used_type mem_used;

   typedef float _v_batt_type;
  _v_batt_type v_batt;

   typedef float _i_batt_type;
  _i_batt_type i_batt;

   typedef float _t_internal_type;
  _t_internal_type t_internal;

   typedef float _p_internal_type;
  _p_internal_type p_internal;

   typedef uint8_t _sw_1_type;
  _sw_1_type sw_1;

   typedef uint8_t _sw_2_type;
  _sw_2_type sw_2;





  typedef boost::shared_ptr< ::autonomous_rov::Health_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::autonomous_rov::Health_<ContainerAllocator> const> ConstPtr;

}; // struct Health_

typedef ::autonomous_rov::Health_<std::allocator<void> > Health;

typedef boost::shared_ptr< ::autonomous_rov::Health > HealthPtr;
typedef boost::shared_ptr< ::autonomous_rov::Health const> HealthConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::autonomous_rov::Health_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::autonomous_rov::Health_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::autonomous_rov::Health_<ContainerAllocator1> & lhs, const ::autonomous_rov::Health_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.cpu_used == rhs.cpu_used &&
    lhs.mem_used == rhs.mem_used &&
    lhs.v_batt == rhs.v_batt &&
    lhs.i_batt == rhs.i_batt &&
    lhs.t_internal == rhs.t_internal &&
    lhs.p_internal == rhs.p_internal &&
    lhs.sw_1 == rhs.sw_1 &&
    lhs.sw_2 == rhs.sw_2;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::autonomous_rov::Health_<ContainerAllocator1> & lhs, const ::autonomous_rov::Health_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace autonomous_rov

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::autonomous_rov::Health_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::autonomous_rov::Health_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::autonomous_rov::Health_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::autonomous_rov::Health_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::autonomous_rov::Health_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::autonomous_rov::Health_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::autonomous_rov::Health_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3759c570a6250d1aa85350125e6ecdda";
  }

  static const char* value(const ::autonomous_rov::Health_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3759c570a6250d1aULL;
  static const uint64_t static_value2 = 0xa85350125e6ecddaULL;
};

template<class ContainerAllocator>
struct DataType< ::autonomous_rov::Health_<ContainerAllocator> >
{
  static const char* value()
  {
    return "autonomous_rov/Health";
  }

  static const char* value(const ::autonomous_rov::Health_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::autonomous_rov::Health_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header    header\n"
"float32   cpu_used    # percent cpu utilization\n"
"float32   mem_used    # percent memory used\n"
"float32   v_batt      # volts\n"
"float32   i_batt      # amps\n"
"float32   t_internal  # degrees C\n"
"float32   p_internal  # Pa\n"
"bool      sw_1        # on/off\n"
"bool      sw_2        # on/off\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::autonomous_rov::Health_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::autonomous_rov::Health_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.cpu_used);
      stream.next(m.mem_used);
      stream.next(m.v_batt);
      stream.next(m.i_batt);
      stream.next(m.t_internal);
      stream.next(m.p_internal);
      stream.next(m.sw_1);
      stream.next(m.sw_2);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Health_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::autonomous_rov::Health_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::autonomous_rov::Health_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "cpu_used: ";
    Printer<float>::stream(s, indent + "  ", v.cpu_used);
    s << indent << "mem_used: ";
    Printer<float>::stream(s, indent + "  ", v.mem_used);
    s << indent << "v_batt: ";
    Printer<float>::stream(s, indent + "  ", v.v_batt);
    s << indent << "i_batt: ";
    Printer<float>::stream(s, indent + "  ", v.i_batt);
    s << indent << "t_internal: ";
    Printer<float>::stream(s, indent + "  ", v.t_internal);
    s << indent << "p_internal: ";
    Printer<float>::stream(s, indent + "  ", v.p_internal);
    s << indent << "sw_1: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.sw_1);
    s << indent << "sw_2: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.sw_2);
  }
};

} // namespace message_operations
} // namespace ros

#endif // AUTONOMOUS_ROV_MESSAGE_HEALTH_H
