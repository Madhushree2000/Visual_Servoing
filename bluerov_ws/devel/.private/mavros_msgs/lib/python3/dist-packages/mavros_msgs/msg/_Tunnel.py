# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from mavros_msgs/Tunnel.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class Tunnel(genpy.Message):
  _md5sum = "6d8c215067d3b319bbb219c37c1ebc5d"
  _type = "mavros_msgs/Tunnel"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# Tunnel
#
# https://mavlink.io/en/messages/common.html#TUNNEL

uint8 target_system
uint8 target_component
uint16 payload_type
uint8 payload_length
uint8[128] payload

# [[[cog:
# from pymavlink.dialects.v20 import common
#
# def decl_enum(ename, pfx='', bsz=8):
#     enum = sorted(common.enums[ename].items())
#     enum.pop() # remove ENUM_END
#
#     cog.outl("# " + ename)
#     for k, e in enum:
#         sn = e.name[len(ename) + 1:]
#         l = "uint{bsz} {pfx}{sn} = {k}".format(**locals())
#         if e.description:
#             l += ' ' * (40 - len(l)) + ' # ' + e.description
#         cog.outl(l)
#
# decl_enum('MAV_TUNNEL_PAYLOAD_TYPE', 'PAYLOAD_TYPE_', 16)
# ]]]
# MAV_TUNNEL_PAYLOAD_TYPE
uint16 PAYLOAD_TYPE_UNKNOWN = 0          # Encoding of payload unknown.
uint16 PAYLOAD_TYPE_STORM32_RESERVED0 = 200 # Registered for STorM32 gimbal controller.
uint16 PAYLOAD_TYPE_STORM32_RESERVED1 = 201 # Registered for STorM32 gimbal controller.
uint16 PAYLOAD_TYPE_STORM32_RESERVED2 = 202 # Registered for STorM32 gimbal controller.
uint16 PAYLOAD_TYPE_STORM32_RESERVED3 = 203 # Registered for STorM32 gimbal controller.
uint16 PAYLOAD_TYPE_STORM32_RESERVED4 = 204 # Registered for STorM32 gimbal controller.
uint16 PAYLOAD_TYPE_STORM32_RESERVED5 = 205 # Registered for STorM32 gimbal controller.
uint16 PAYLOAD_TYPE_STORM32_RESERVED6 = 206 # Registered for STorM32 gimbal controller.
uint16 PAYLOAD_TYPE_STORM32_RESERVED7 = 207 # Registered for STorM32 gimbal controller.
uint16 PAYLOAD_TYPE_STORM32_RESERVED8 = 208 # Registered for STorM32 gimbal controller.
uint16 PAYLOAD_TYPE_STORM32_RESERVED9 = 209 # Registered for STorM32 gimbal controller.
# [[[end]]] (checksum: 3327b212af02c2d47d940cd6de049624)
"""
  # Pseudo-constants
  PAYLOAD_TYPE_UNKNOWN = 0
  PAYLOAD_TYPE_STORM32_RESERVED0 = 200
  PAYLOAD_TYPE_STORM32_RESERVED1 = 201
  PAYLOAD_TYPE_STORM32_RESERVED2 = 202
  PAYLOAD_TYPE_STORM32_RESERVED3 = 203
  PAYLOAD_TYPE_STORM32_RESERVED4 = 204
  PAYLOAD_TYPE_STORM32_RESERVED5 = 205
  PAYLOAD_TYPE_STORM32_RESERVED6 = 206
  PAYLOAD_TYPE_STORM32_RESERVED7 = 207
  PAYLOAD_TYPE_STORM32_RESERVED8 = 208
  PAYLOAD_TYPE_STORM32_RESERVED9 = 209

  __slots__ = ['target_system','target_component','payload_type','payload_length','payload']
  _slot_types = ['uint8','uint8','uint16','uint8','uint8[128]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       target_system,target_component,payload_type,payload_length,payload

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Tunnel, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.target_system is None:
        self.target_system = 0
      if self.target_component is None:
        self.target_component = 0
      if self.payload_type is None:
        self.payload_type = 0
      if self.payload_length is None:
        self.payload_length = 0
      if self.payload is None:
        self.payload = b'\0'*128
    else:
      self.target_system = 0
      self.target_component = 0
      self.payload_type = 0
      self.payload_length = 0
      self.payload = b'\0'*128

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2BHB().pack(_x.target_system, _x.target_component, _x.payload_type, _x.payload_length))
      _x = self.payload
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(_get_struct_128B().pack(*_x))
      else:
        buff.write(_get_struct_128s().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 5
      (_x.target_system, _x.target_component, _x.payload_type, _x.payload_length,) = _get_struct_2BHB().unpack(str[start:end])
      start = end
      end += 128
      self.payload = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2BHB().pack(_x.target_system, _x.target_component, _x.payload_type, _x.payload_length))
      _x = self.payload
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(_get_struct_128B().pack(*_x))
      else:
        buff.write(_get_struct_128s().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 5
      (_x.target_system, _x.target_component, _x.payload_type, _x.payload_length,) = _get_struct_2BHB().unpack(str[start:end])
      start = end
      end += 128
      self.payload = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_128B = None
def _get_struct_128B():
    global _struct_128B
    if _struct_128B is None:
        _struct_128B = struct.Struct("<128B")
    return _struct_128B
_struct_128s = None
def _get_struct_128s():
    global _struct_128s
    if _struct_128s is None:
        _struct_128s = struct.Struct("<128s")
    return _struct_128s
_struct_2BHB = None
def _get_struct_2BHB():
    global _struct_2BHB
    if _struct_2BHB is None:
        _struct_2BHB = struct.Struct("<2BHB")
    return _struct_2BHB
