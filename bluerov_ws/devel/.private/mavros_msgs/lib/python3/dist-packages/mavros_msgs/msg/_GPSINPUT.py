# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from mavros_msgs/GPSINPUT.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class GPSINPUT(genpy.Message):
  _md5sum = "928ef4ffec7b9af7c6e4748f0542b6a0"
  _type = "mavros_msgs/GPSINPUT"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """# FCU GPS INPUT message for the gps_input plugin
# <a href="https://mavlink.io/en/messages/common.html#GPS_INPUT">mavlink GPS_INPUT message</a>.

std_msgs/Header header
## GPS_FIX_TYPE enum
uint8 GPS_FIX_TYPE_NO_GPS     = 0    # No GPS connected
uint8 GPS_FIX_TYPE_NO_FIX     = 1    # No position information, GPS is connected
uint8 GPS_FIX_TYPE_2D_FIX     = 2    # 2D position
uint8 GPS_FIX_TYPE_3D_FIX     = 3    # 3D position
uint8 GPS_FIX_TYPE_DGPS       = 4    # DGPS/SBAS aided 3D position
uint8 GPS_FIX_TYPE_RTK_FLOATR = 5    # TK float, 3D position
uint8 GPS_FIX_TYPE_RTK_FIXEDR = 6    # TK Fixed, 3D position
uint8 GPS_FIX_TYPE_STATIC     = 7    # Static fixed, typically used for base stations
uint8 GPS_FIX_TYPE_PPP        = 8    # PPP, 3D position
uint8 fix_type      # [GPS_FIX_TYPE] GPS fix type

uint8 gps_id        # ID of the GPS for multiple GPS inputs
uint16 ignore_flags # Bitmap indicating which GPS input flags fields to ignore. All other fields must be provided.

uint32 time_week_ms # [ms] GPS time (from start of GPS week)
uint16 time_week    # GPS week number
int32 lat           # [degE7] Latitude (WGS84, EGM96 ellipsoid)
int32 lon           # [degE7] Longitude (WGS84, EGM96 ellipsoid)
float32 alt         # [m] Altitude (MSL). Positive for up.

float32 hdop        # [m] GPS HDOP horizontal dilution of position.
float32 vdop        # [m] GPS VDOP vertical dilution of position
float32 vn          # [m/s] GPS velocity in NORTH direction in earth-fixed NED frame
float32 ve          # [m/s] GPS velocity in EAST direction in earth-fixed NED frame
float32 vd          # [m/s] GPS velocity in DOWN direction in earth-fixed NED frame

float32 speed_accuracy # [m/s] GPS speed accuracy
float32 horiz_accuracy # [m] GPS horizontal accuracy
float32 vert_accuracy  # [m] GPS vertical accuracy

uint8 satellites_visible # Number of satellites visible. If unknown, set to 255
uint16 yaw          # [cdeg] Yaw in earth frame from north.

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id
"""
  # Pseudo-constants
  GPS_FIX_TYPE_NO_GPS = 0
  GPS_FIX_TYPE_NO_FIX = 1
  GPS_FIX_TYPE_2D_FIX = 2
  GPS_FIX_TYPE_3D_FIX = 3
  GPS_FIX_TYPE_DGPS = 4
  GPS_FIX_TYPE_RTK_FLOATR = 5
  GPS_FIX_TYPE_RTK_FIXEDR = 6
  GPS_FIX_TYPE_STATIC = 7
  GPS_FIX_TYPE_PPP = 8

  __slots__ = ['header','fix_type','gps_id','ignore_flags','time_week_ms','time_week','lat','lon','alt','hdop','vdop','vn','ve','vd','speed_accuracy','horiz_accuracy','vert_accuracy','satellites_visible','yaw']
  _slot_types = ['std_msgs/Header','uint8','uint8','uint16','uint32','uint16','int32','int32','float32','float32','float32','float32','float32','float32','float32','float32','float32','uint8','uint16']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,fix_type,gps_id,ignore_flags,time_week_ms,time_week,lat,lon,alt,hdop,vdop,vn,ve,vd,speed_accuracy,horiz_accuracy,vert_accuracy,satellites_visible,yaw

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GPSINPUT, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.fix_type is None:
        self.fix_type = 0
      if self.gps_id is None:
        self.gps_id = 0
      if self.ignore_flags is None:
        self.ignore_flags = 0
      if self.time_week_ms is None:
        self.time_week_ms = 0
      if self.time_week is None:
        self.time_week = 0
      if self.lat is None:
        self.lat = 0
      if self.lon is None:
        self.lon = 0
      if self.alt is None:
        self.alt = 0.
      if self.hdop is None:
        self.hdop = 0.
      if self.vdop is None:
        self.vdop = 0.
      if self.vn is None:
        self.vn = 0.
      if self.ve is None:
        self.ve = 0.
      if self.vd is None:
        self.vd = 0.
      if self.speed_accuracy is None:
        self.speed_accuracy = 0.
      if self.horiz_accuracy is None:
        self.horiz_accuracy = 0.
      if self.vert_accuracy is None:
        self.vert_accuracy = 0.
      if self.satellites_visible is None:
        self.satellites_visible = 0
      if self.yaw is None:
        self.yaw = 0
    else:
      self.header = std_msgs.msg.Header()
      self.fix_type = 0
      self.gps_id = 0
      self.ignore_flags = 0
      self.time_week_ms = 0
      self.time_week = 0
      self.lat = 0
      self.lon = 0
      self.alt = 0.
      self.hdop = 0.
      self.vdop = 0.
      self.vn = 0.
      self.ve = 0.
      self.vd = 0.
      self.speed_accuracy = 0.
      self.horiz_accuracy = 0.
      self.vert_accuracy = 0.
      self.satellites_visible = 0
      self.yaw = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2BHIH2i9fBH().pack(_x.fix_type, _x.gps_id, _x.ignore_flags, _x.time_week_ms, _x.time_week, _x.lat, _x.lon, _x.alt, _x.hdop, _x.vdop, _x.vn, _x.ve, _x.vd, _x.speed_accuracy, _x.horiz_accuracy, _x.vert_accuracy, _x.satellites_visible, _x.yaw))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 57
      (_x.fix_type, _x.gps_id, _x.ignore_flags, _x.time_week_ms, _x.time_week, _x.lat, _x.lon, _x.alt, _x.hdop, _x.vdop, _x.vn, _x.ve, _x.vd, _x.speed_accuracy, _x.horiz_accuracy, _x.vert_accuracy, _x.satellites_visible, _x.yaw,) = _get_struct_2BHIH2i9fBH().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2BHIH2i9fBH().pack(_x.fix_type, _x.gps_id, _x.ignore_flags, _x.time_week_ms, _x.time_week, _x.lat, _x.lon, _x.alt, _x.hdop, _x.vdop, _x.vn, _x.ve, _x.vd, _x.speed_accuracy, _x.horiz_accuracy, _x.vert_accuracy, _x.satellites_visible, _x.yaw))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 57
      (_x.fix_type, _x.gps_id, _x.ignore_flags, _x.time_week_ms, _x.time_week, _x.lat, _x.lon, _x.alt, _x.hdop, _x.vdop, _x.vn, _x.ve, _x.vd, _x.speed_accuracy, _x.horiz_accuracy, _x.vert_accuracy, _x.satellites_visible, _x.yaw,) = _get_struct_2BHIH2i9fBH().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2BHIH2i9fBH = None
def _get_struct_2BHIH2i9fBH():
    global _struct_2BHIH2i9fBH
    if _struct_2BHIH2i9fBH is None:
        _struct_2BHIH2i9fBH = struct.Struct("<2BHIH2i9fBH")
    return _struct_2BHIH2i9fBH
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
